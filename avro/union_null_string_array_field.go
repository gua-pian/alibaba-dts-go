// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     record.avsc
 */
package avro

import (
	"io"
	"fmt"

	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/vm/types"
)


type UnionNullStringArrayFieldTypeEnum int
const (

	 UnionNullStringArrayFieldTypeEnumNull UnionNullStringArrayFieldTypeEnum = 0

	 UnionNullStringArrayFieldTypeEnumString UnionNullStringArrayFieldTypeEnum = 1

	 UnionNullStringArrayFieldTypeEnumArrayField UnionNullStringArrayFieldTypeEnum = 2

)

type UnionNullStringArrayField struct {

	Null *types.NullVal

	String string

	ArrayField []*Field

	UnionType UnionNullStringArrayFieldTypeEnum
}

func writeUnionNullStringArrayField(r *UnionNullStringArrayField, w io.Writer) error {
	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType{
	
	case UnionNullStringArrayFieldTypeEnumNull:
		return vm.WriteNull(r.Null, w)
        
	case UnionNullStringArrayFieldTypeEnumString:
		return vm.WriteString(r.String, w)
        
	case UnionNullStringArrayFieldTypeEnumArrayField:
		return writeArrayField(r.ArrayField, w)
        
	}
	return fmt.Errorf("invalid value for *UnionNullStringArrayField")
}

func NewUnionNullStringArrayField() *UnionNullStringArrayField {
	return &UnionNullStringArrayField{}
}

func (_ *UnionNullStringArrayField) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *UnionNullStringArrayField) SetInt(v int32) { panic("Unsupported operation") }
func (_ *UnionNullStringArrayField) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *UnionNullStringArrayField) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullStringArrayField) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *UnionNullStringArrayField) SetString(v string) { panic("Unsupported operation") }
func (r *UnionNullStringArrayField) SetLong(v int64) { 
	r.UnionType = (UnionNullStringArrayFieldTypeEnum)(v)
}
func (r *UnionNullStringArrayField) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
		
		return r.Null
		
	
	case 1:
		
		
		return (*types.String)(&r.String)
		
	
	case 2:
		
		r.ArrayField = make([]*Field, 0)
		
		
		return (*ArrayFieldWrapper)(&r.ArrayField)
		
	
	}
	panic("Unknown field index")
}
func (_ *UnionNullStringArrayField) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullStringArrayField) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullStringArrayField) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNullStringArrayField) Finalize()  { }
