// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     record.avsc
 */
package avro

import (
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/vm"
)

  
type Operation int32

const (

	OperationINSERT Operation = 0

	OperationUPDATE Operation = 1

	OperationDELETE Operation = 2

	OperationDDL Operation = 3

	OperationBEGIN Operation = 4

	OperationCOMMIT Operation = 5

	OperationROLLBACK Operation = 6

	OperationABORT Operation = 7

	OperationHEARTBEAT Operation = 8

	OperationCHECKPOINT Operation = 9

	OperationCOMMAND Operation = 10

	OperationFILL Operation = 11

	OperationFINISH Operation = 12

	OperationCONTROL Operation = 13

	OperationRDB Operation = 14

	OperationNOOP Operation = 15

	OperationINIT Operation = 16

)

func (e Operation) String() string {
	switch e {

	case OperationINSERT:
		return "INSERT"

	case OperationUPDATE:
		return "UPDATE"

	case OperationDELETE:
		return "DELETE"

	case OperationDDL:
		return "DDL"

	case OperationBEGIN:
		return "BEGIN"

	case OperationCOMMIT:
		return "COMMIT"

	case OperationROLLBACK:
		return "ROLLBACK"

	case OperationABORT:
		return "ABORT"

	case OperationHEARTBEAT:
		return "HEARTBEAT"

	case OperationCHECKPOINT:
		return "CHECKPOINT"

	case OperationCOMMAND:
		return "COMMAND"

	case OperationFILL:
		return "FILL"

	case OperationFINISH:
		return "FINISH"

	case OperationCONTROL:
		return "CONTROL"

	case OperationRDB:
		return "RDB"

	case OperationNOOP:
		return "NOOP"

	case OperationINIT:
		return "INIT"

	}
	return "unknown"
}

func writeOperation(r Operation, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewOperationValue(raw string) (r Operation, err error) {
	switch raw {

	case "INSERT":
		return OperationINSERT, nil

	case "UPDATE":
		return OperationUPDATE, nil

	case "DELETE":
		return OperationDELETE, nil

	case "DDL":
		return OperationDDL, nil

	case "BEGIN":
		return OperationBEGIN, nil

	case "COMMIT":
		return OperationCOMMIT, nil

	case "ROLLBACK":
		return OperationROLLBACK, nil

	case "ABORT":
		return OperationABORT, nil

	case "HEARTBEAT":
		return OperationHEARTBEAT, nil

	case "CHECKPOINT":
		return OperationCHECKPOINT, nil

	case "COMMAND":
		return OperationCOMMAND, nil

	case "FILL":
		return OperationFILL, nil

	case "FINISH":
		return OperationFINISH, nil

	case "CONTROL":
		return OperationCONTROL, nil

	case "RDB":
		return OperationRDB, nil

	case "NOOP":
		return OperationNOOP, nil

	case "INIT":
		return OperationINIT, nil

	}

	return -1, fmt.Errorf("invalid value for Operation: '%s'", raw)
}
