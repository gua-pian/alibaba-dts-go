// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     record.avsc
 */
package avro

import (
	"io"
	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)

  
type TimestampWithTimeZone struct {

	
	
		Value *DateTime
	

	
	
		Timezone string
	

}

func NewTimestampWithTimeZone() (*TimestampWithTimeZone) {
	return &TimestampWithTimeZone{}
}

func DeserializeTimestampWithTimeZone(r io.Reader) (*TimestampWithTimeZone, error) {
	t := NewTimestampWithTimeZone()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err	
	}
	return t, err
}

func DeserializeTimestampWithTimeZoneFromSchema(r io.Reader, schema string) (*TimestampWithTimeZone, error) {
	t := NewTimestampWithTimeZone()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err	
	}
	return t, err
}

func writeTimestampWithTimeZone(r *TimestampWithTimeZone, w io.Writer) error {
	var err error
	
	err = writeDateTime( r.Value, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteString( r.Timezone, w)
	if err != nil {
		return err			
	}
	
	return err
}

func (r *TimestampWithTimeZone) Serialize(w io.Writer) error {
	return writeTimestampWithTimeZone(r, w)
}

func (r *TimestampWithTimeZone) Schema() string {
	return "{\"fields\":[{\"name\":\"value\",\"type\":{\"fields\":[{\"default\":null,\"name\":\"year\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"month\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"day\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"hour\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"minute\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"second\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"millis\",\"type\":[\"null\",\"int\"]}],\"name\":\"DateTime\",\"namespace\":\"com.alibaba.dts.formats.avro\",\"type\":\"record\"}},{\"name\":\"timezone\",\"type\":\"string\"}],\"name\":\"TimestampWithTimeZone\",\"namespace\":\"com.alibaba.dts.formats.avro\",\"type\":\"record\"}"
}

func (r *TimestampWithTimeZone) SchemaName() string {
	return "com.alibaba.dts.formats.avro.TimestampWithTimeZone"
}

func (_ *TimestampWithTimeZone) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *TimestampWithTimeZone) SetInt(v int32) { panic("Unsupported operation") }
func (_ *TimestampWithTimeZone) SetLong(v int64) { panic("Unsupported operation") }
func (_ *TimestampWithTimeZone) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *TimestampWithTimeZone) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *TimestampWithTimeZone) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *TimestampWithTimeZone) SetString(v string) { panic("Unsupported operation") }
func (_ *TimestampWithTimeZone) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TimestampWithTimeZone) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
			r.Value = NewDateTime()
	
		
		
			return r.Value
		
	
	case 1:
		
		
			return (*types.String)(&r.Timezone)
		
	
	}
	panic("Unknown field index")
}

func (r *TimestampWithTimeZone) SetDefault(i int) {
	switch (i) {
	
        
	
        
	
	}
	panic("Unknown field index")
}

func (_ *TimestampWithTimeZone) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *TimestampWithTimeZone) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *TimestampWithTimeZone) Finalize() { }
