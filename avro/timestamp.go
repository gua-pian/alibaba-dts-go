// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     record.avsc
 */
package avro

import (
	"io"
	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)

  
type Timestamp struct {

	
	
		Timestamp int64
	

	
	
		Millis int32
	

}

func NewTimestamp() (*Timestamp) {
	return &Timestamp{}
}

func DeserializeTimestamp(r io.Reader) (*Timestamp, error) {
	t := NewTimestamp()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err	
	}
	return t, err
}

func DeserializeTimestampFromSchema(r io.Reader, schema string) (*Timestamp, error) {
	t := NewTimestamp()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err	
	}
	return t, err
}

func writeTimestamp(r *Timestamp, w io.Writer) error {
	var err error
	
	err = vm.WriteLong( r.Timestamp, w)
	if err != nil {
		return err			
	}
	
	err = vm.WriteInt( r.Millis, w)
	if err != nil {
		return err			
	}
	
	return err
}

func (r *Timestamp) Serialize(w io.Writer) error {
	return writeTimestamp(r, w)
}

func (r *Timestamp) Schema() string {
	return "{\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"millis\",\"type\":\"int\"}],\"name\":\"Timestamp\",\"namespace\":\"com.alibaba.dts.formats.avro\",\"type\":\"record\"}"
}

func (r *Timestamp) SchemaName() string {
	return "com.alibaba.dts.formats.avro.Timestamp"
}

func (_ *Timestamp) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *Timestamp) SetInt(v int32) { panic("Unsupported operation") }
func (_ *Timestamp) SetLong(v int64) { panic("Unsupported operation") }
func (_ *Timestamp) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *Timestamp) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *Timestamp) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *Timestamp) SetString(v string) { panic("Unsupported operation") }
func (_ *Timestamp) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Timestamp) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
		
			return (*types.Long)(&r.Timestamp)
		
	
	case 1:
		
		
			return (*types.Int)(&r.Millis)
		
	
	}
	panic("Unknown field index")
}

func (r *Timestamp) SetDefault(i int) {
	switch (i) {
	
        
	
        
	
	}
	panic("Unknown field index")
}

func (_ *Timestamp) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Timestamp) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *Timestamp) Finalize() { }
